from brownie import Router
from brownie.network.main import show_active

from scripts.src.accounts import user
from scripts.src.addresses import load_addresses
from scripts.src.tokens import load_tokens, approve_tokens_to

"""
Executes the function initTokenCross from Router
"""
def main():
    network = show_active()
    address = load_addresses(network)
    tokens = load_tokens(network)

    amount = 2 * 1000000000000000000
    swapperCallData = '0x000000000000000000000000def189deaef76e379df891899eb5a00a94cbc250415565b0000000000000000000000000b3654dc3d10ea7645f8319668e8f54d2574fbdc800000000000000000000000004068da6c83afcfa0e13ba15a6696662335d5b750000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000de6a3500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b3654dc3d10ea7645f8319668e8f54d2574fbdc800000000000000000000000004068da6c83afcfa0e13ba15a6696662335d5b7500000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000001142656574686f76656e780000000000000000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000de6a350000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000000000000000000020dd72ed959b6147912c2e529f0a0c651c33c9cef0e2c47d4c9fbbbc2f2e19acdaa3c773a3ecd22100010000000000000000000a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000b3654dc3d10ea7645f8319668e8f54d2574fbdc8000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000009be732891f62823746'
    destinationChainId = '137'
    bridgeCallData = '0x00000000000000000000000095bf7e307bc1ab0ba38ae10fc27084bc36fcd605'

    # Approve the contract to take the tokens
    approve_tokens_to(
        token_address=tokens['link']['address'],
        from_address=user.address,
        to_address=address['router'],
        amount=amount)

    router = Router.at(address['router'])

    tx = router.initSwidge(
        amount,
        [
            0,
            tokens['link']['address'],
            tokens['usdc']['address'],
            swapperCallData,
            True
        ],
        [
            tokens['usdc']['address'],
            destinationChainId,
            bridgeCallData,
            True
        ],
        'random-uuid',
        {'from': user, 'required_confs': 1})

    print(tx.info())
