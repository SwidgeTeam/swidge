version: "3.5"

services:

  db:
    build:
      context: db/
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - ${MYSQL_PORT}:${MYSQL_INTERNAL_PORT}
    volumes:
      - ./data/db:/var/lib/mysql

  front:
    build:
      context: front/
    environment:
      VITE_APP_RPC_NODE_POLYGON: ${polygon_RPC_NODE}
      VITE_APP_RPC_NODE_FANTOM: ${fantom_RPC_NODE}
      VITE_APP_RPC_NODE_BSC: ${bsc_RPC_NODE}
      VITE_APP_RPC_NODE_AVALANCHE: ${avalanche_RPC_NODE}
      VITE_APP_RPC_NODE_OPTIMISM: ${optimism_RPC_NODE}
      VITE_APP_API_HOST: ${API_URL}
    ports:
      - ${FRONT_APP_PORT}:3000
    volumes:
      - ./front/www/:/front_app/

  api:
    depends_on:
      - ${DOCKER_DB_SERVICE}
    build:
      context: api/
    environment:
      DB_HOST: ${MYSQL_HOST}
      DB_PORT: ${MYSQL_INTERNAL_PORT}
      DB_USER: ${MYSQL_USER}
      DB_PASS: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}
      APP_PORT: 3000
      API_URL: ${API_URL}
      APP_HOST_REGEX: ${API_HOST}
      API_AUTH_TOKEN: ${API_AUTH_TOKEN}
      RPC_NODE_POLYGON: ${polygon_RPC_NODE}
      RPC_NODE_FANTOM: ${fantom_RPC_NODE}
      RPC_NODE_BSC: ${bsc_RPC_NODE}
      RPC_NODE_AVALANCHE: ${avalanche_RPC_NODE}
      RPC_NODE_OPTIMISM: ${optimism_RPC_NODE}
      SWAGGER_USER: ${SWAGGER_USER}
      SWAGGER_PASS: ${SWAGGER_PASS}
    ports:
      - ${API_PORT}:3000
    volumes:
      - ./api/www/:/api/

  relayer:
    build:
      context: relayer/
    environment:
      PRIVATE_KEY: ${RELAYER_PRIVATE_KEY}
      API_URL: ${API_URL}
      SQS_QUEUE_URL: ${AWS_SQS_QUEUE_URL}
      REGION: ${AWS_SQS_REGION}
      ACCESS_KEY: ${AWS_SQS_ACCESS_KEY}
      SECRET: ${AWS_SQS_SECRET}
      API_AUTH_TOKEN: ${API_AUTH_TOKEN}
      RPC_NODE_POLYGON: ${polygon_RPC_NODE}
      RPC_NODE_FANTOM: ${fantom_RPC_NODE}
      RPC_NODE_BSC: ${bsc_RPC_NODE}
      RPC_NODE_AVALANCHE: ${avalanche_RPC_NODE}
      RPC_NODE_OPTIMISM: ${optimism_RPC_NODE}
    network_mode: host
    volumes:
      - ./relayer/www/:/relayer/

  localstack:
    image: localstack/localstack:0.14.3
    environment:
      AWS_DEFAULT_REGION: ${AWS_SQS_REGION}
      EDGE_PORT: 4566
      SERVICES: sqs
      DATA_DIR: /tmp/localstack/data
    ports:
      - ${LOCALSTACK_PORT}:4566
    volumes:
      - ./data/localstack:/tmp/localstack/data
      - /var/run/docker.sock:/var/run/docker.sock

  hardhat:
    build:
      context: contracts/
    environment:
      MNEMONIC: ${MNEMONIC}
      GAS_REPORTING: ${GAS_REPORTING}
      RPC_NODE_FANTOM: ${fantom_RPC_NODE}
      RPC_NODE_POLYGON: ${polygon_RPC_NODE}
      RPC_NODE_BSC: ${bsc_RPC_NODE}
      RPC_NODE_AVALANCHE: ${avalanche_RPC_NODE}
      RPC_NODE_OPTIMISM: ${optimism_RPC_NODE}
      RPC_NODE_CELO: ${celo_RPC_NODE}
      CHAIN_ID_FANTOM: ${fantom_CHAIN_ID}
      CHAIN_ID_POLYGON: ${polygon_CHAIN_ID}
      CHAIN_ID_BSC: ${bsc_CHAIN_ID}
      CHAIN_ID_AVAX: ${avalanche_CHAIN_ID}
      CHAIN_ID_OPTIMISM: ${optimism_CHAIN_ID}
      CHAIN_ID_CELO: ${celo_CHAIN_ID}
      POLYGONSCAN_API_KEY: ${POLYGONSCAN_API_KEY}
      FTMSCAN_API_KEY: ${FTMSCAN_API_KEY}
      SNOWTRACE_API_KEY: ${SNOWTRACE_API_KEY}
      BSCSCAN_API_KEY: ${BSCSCAN_API_KEY}
      OPTIMISTIC_API_KEY: ${OPTIMISTIC_API_KEY}
    volumes:
      - ./contracts/www/:/code

  terraform:
    image: hashicorp/terraform:1.2.3
    environment:
      TF_VAR_domain: ${TF_DOMAIN}
      TF_VAR_vpc_cidr: ${TF_VPC_CIDR}
      TF_VAR_region: ${TF_AWS_REGION}
      TF_VAR_environment: ${TF_ENVIRONMENT}
      TF_VAR_base_url: ${TF_BASE_URL}
      TF_VAR_aws_access_key: ${CREATOR_AWS_ACCESS_KEY}
      TF_VAR_aws_secret_key: ${CREATOR_AWS_SECRET_KEY}
      TF_VAR_database_name: ${AURORA_DB_NAME}
      TF_VAR_database_username: ${AURORA_MASTER_USERNAME}
      TF_VAR_database_password: ${AURORA_MASTER_PASSWORD}
      TF_VAR_api_instance_type: ${TF_API_INSTANCE_TYPE}
      TF_VAR_relayer_instance_type: ${TF_RELAYER_INSTANCE_TYPE}
      TF_VAR_grafana_instance_type: ${TF_GRAFANA_INSTANCE_TYPE}
      TF_VAR_transactions_queue: ${AWS_SQS_QUEUE_NAME}
      TF_VAR_instances_key: ${TF_INSTANCES_KEY}
    volumes:
      - ./infrastructure/terraform:/code
    working_dir: /code

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana:/var/lib/grafana
    ports:
      - "4090:3000"

  loki:
    image: grafana/loki:2.6.1
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-batch-size: "400"
    volumes:
      - loki:/loki
      - ./grafana/local:/etc/loki
    command: -config.file=/etc/loki/loki-config.yml
    ports:
      - "3100:3100"

  promtail:
    image: grafana/promtail:2.4.0
    command: -config.file=/etc/promtail/promtail-config.yml
    volumes:
      - /var/log:/var/log
      - ./grafana/local:/etc/promtail

volumes:
  grafana:
  promtail:
  loki:

networks:
  default:
    name: ${DOCKER_NETWORK_NAME}

