import { SwapOrder } from '../../../../src/swaps/domain/swap-order';
import { BridgingOrder } from '../../../../src/bridges/domain/bridging-order';
import { RouterCallEncoder } from '../../../../src/shared/domain/router-call-encoder';
import { BigInteger } from '../../../../src/shared/domain/big-integer';

describe('router-call-encoder', () => {
  it('should encode a default `initSwidge` callData correctly', () => {
    // Arrange
    const encoder = new RouterCallEncoder();
    const originSwap = SwapOrder.notRequired();
    const bridgeOrder = BridgingOrder.notRequired();
    const destinationSwap = SwapOrder.notRequired();
    const amountIn = BigInteger.fromDecimal('10');
    const receiver = '0xF0245F6251Bef9447A08766b9DA2B07b28aD80B0';

    // Act
    const callData = encoder.encodeInitSwidge(
      amountIn,
      originSwap,
      bridgeOrder,
      destinationSwap,
      receiver,
    );

    // Assert
    expect(callData).toEqual(
      '0x' +
        '7596ce66' +
        '0000000000000000000000000000000000000000000000008ac7230489e80000' +
        '00000000000000000000000000000000000000000000000000000000000000e0' +
        '00000000000000000000000000000000000000000000000000000000000001a0' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '00000000000000000000000000000000000000000000000000000000000000a0' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000080' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000',
    );
  });

  it('should encode a default `finalizeSwidge` callData correctly', () => {
    // Arrange
    const encoder = new RouterCallEncoder();
    const amountIn = BigInteger.fromDecimal('10');
    const receiver = '0xF0245F6251Bef9447A08766b9DA2B07b28aD80B0';
    const originTxHash = '0xb37283233dc7308397ca5b6b822d1dcf3c5c7f0e77d073c4251e63a13c6d3af1';
    const destinationSwap = SwapOrder.notRequired();

    // Act
    const callData = encoder.encodeFinalizeSwidge(
      amountIn,
      receiver,
      originTxHash,
      destinationSwap,
    );

    // Assert
    expect(callData).toEqual(
      '0x' +
        'c72f449b' +
        '0000000000000000000000000000000000000000000000008ac7230489e80000' +
        '000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0' +
        'b37283233dc7308397ca5b6b822d1dcf3c5c7f0e77d073c4251e63a13c6d3af1' +
        '0000000000000000000000000000000000000000000000000000000000000080' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '00000000000000000000000000000000000000000000000000000000000000a0' +
        '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000000',
    );
  });
});
